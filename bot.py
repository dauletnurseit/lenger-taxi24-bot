import os
import re
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import db

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID", "-1003084604599"))

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)

# ---------------------
# –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
# ---------------------
def validate_kz_phone(phone: str) -> tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (True, –æ—á–∏—â–µ–Ω–Ω—ã–π_–Ω–æ–º–µ—Ä) –∏–ª–∏ (False, "")
    """
    phone = re.sub(r'[\s\-\(\)]', '', phone)
    valid_codes = ['707', '775', '701', '702', '747', '705', '708', 
                   '700', '776', '771', '778', '706', '777']
    
    if phone.startswith('+7'):
        phone = phone[2:]
    elif phone.startswith('8'):
        phone = phone[1:]
    elif phone.startswith('7') and len(phone) == 11:
        phone = phone[1:]
    
    if len(phone) != 10:
        return False, ""
    
    if not phone.isdigit():
        return False, ""
    
    operator_code = phone[:3]
    if operator_code not in valid_codes:
        return False, ""
    
    return True, f"+7{phone}"

# ---------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
# ---------------------
class OrderStates(StatesGroup):
    waiting_trip_type = State()
    waiting_from = State()
    waiting_to = State()
    waiting_price = State()
    waiting_phone = State()

# ---------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ---------------------
def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üöï –¢–∞–∫—Å–∏ —à–∞“õ—ã—Ä—É"))
    kb.add(types.KeyboardButton("üìä –ú–µ–Ω—ñ“£ —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞—Ä—ã–º"))
    return kb

def trip_type_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üèô “ö–∞–ª–∞ —ñ—à—ñ–Ω–¥–µ"))
    kb.add(types.KeyboardButton("üåÑ “ö–∞–ª–∞–¥–∞–Ω —Ç—ã—Å"))
    kb.add(types.KeyboardButton("‚ùå –ë–æ–ª–¥—ã—Ä–º–∞—É"))
    return kb

def phone_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω–¥—ã –∂—ñ–±–µ—Ä—É", request_contact=True))
    kb.add(types.KeyboardButton("‚ùå –ë–æ–ª–¥—ã—Ä–º–∞—É"))
    return kb

def cancel_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("‚ùå –ë–æ–ª–¥—ã—Ä–º–∞—É"))
    return kb

def accept_keyboard(order_id: int):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(
        "üöï “ö–∞–±—ã–ª–¥–∞—É", callback_data=f"accept_{order_id}"
    ))
    return keyboard

def complete_trip_keyboard(order_id: int):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(
        "‚úÖ –°–∞–ø–∞—Ä –∞—è“õ—Ç–∞–ª–¥—ã", callback_data=f"complete_{order_id}"
    ))
    return keyboard

def rating_keyboard(order_id: int):
    keyboard = types.InlineKeyboardMarkup(row_width=5)
    for i in range(1, 6):
        keyboard.insert(types.InlineKeyboardButton(
            str(i) + "‚≠ê", callback_data=f"rate_{order_id}_{i}"
        ))
    return keyboard

# ---------------------
# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
# ---------------------
@dp.message_handler(commands=['start'], state='*')
async def start_cmd(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "–°”ô–ª–µ–º! –¢–∞–∫—Å–∏ —à–∞“õ—ã—Ä—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑ üëá",
        reply_markup=main_menu_kb()
    )

# ---------------------
# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
# ---------------------
@dp.message_handler(lambda m: m.text == "‚ùå –ë–æ–ª–¥—ã—Ä–º–∞—É", state='*')
async def cancel_order(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–¢–∞–ø—Å—ã—Ä—ã—Å –±–æ–ª–¥—ã—Ä—ã–ª–º–∞–¥—ã", reply_markup=main_menu_kb())

# ---------------------
# –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–∞
# ---------------------
@dp.message_handler(lambda m: m.text == "üöï –¢–∞–∫—Å–∏ —à–∞“õ—ã—Ä—É")
async def start_order(message: types.Message):
    await OrderStates.waiting_trip_type.set()
    await message.answer(
        "–°–∞–ø–∞—Ä —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=trip_type_kb()
    )

@dp.message_handler(state=OrderStates.waiting_trip_type)
async def get_trip_type(message: types.Message, state: FSMContext):
    if message.text == "üèô “ö–∞–ª–∞ —ñ—à—ñ–Ω–¥–µ":
        trip_type = "city"
        trip_type_text = "üèô “ö–∞–ª–∞ —ñ—à—ñ–Ω–¥–µ"
    elif message.text == "üåÑ “ö–∞–ª–∞–¥–∞–Ω —Ç—ã—Å":
        trip_type = "intercity"
        trip_type_text = "üåÑ “ö–∞–ª–∞–¥–∞–Ω —Ç—ã—Å"
    else:
        await message.answer(
            "–°–∞–ø–∞—Ä —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
            reply_markup=trip_type_kb()
        )
        return
    
    await state.update_data(trip_type=trip_type, trip_type_text=trip_type_text)
    await OrderStates.waiting_from.set()
    await message.answer(
        "“ö–∞–π –∂–µ—Ä–¥–µ–Ω –∫–µ—Ç–µ—Å—ñ–∑? (–º–µ–∫–µ–Ω–∂–∞–π–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑)",
        reply_markup=cancel_kb()
    )

@dp.message_handler(state=OrderStates.waiting_from)
async def get_from_addr(message: types.Message, state: FSMContext):
    await state.update_data(from_addr=message.text)
    await OrderStates.waiting_to.set()
    await message.answer(
        "“ö–∞–π–¥–∞ –±–∞—Ä–∞—Å—ã–∑? (–º–µ–∫–µ–Ω–∂–∞–π–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑)",
        reply_markup=cancel_kb()
    )

@dp.message_handler(state=OrderStates.waiting_to)
async def get_to_addr(message: types.Message, state: FSMContext):
    await state.update_data(to_addr=message.text)
    await OrderStates.waiting_price.set()
    
    data = await state.get_data()
    trip_type = data.get('trip_type', 'city')
    
    if trip_type == 'city':
        price_hint = "–ú—ã—Å–∞–ª: 500, 700, 1000"
    else:
        price_hint = "–ú—ã—Å–∞–ª: 2000, 3000, 5000"
    
    await message.answer(
        f"üí∞ ”®–∑—ñ“£—ñ–∑–¥—ñ“£ –±–∞“ì–∞ “±—Å—ã–Ω—ã—Å—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ (—Ç–µ“£–≥–µ–º–µ–Ω):\n\n"
        f"{price_hint}\n\n"
        f"‚ö†Ô∏è –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä —Å—ñ–∑–¥—ñ“£ –±–∞“ì–∞“£—ã–∑–¥—ã –∫”©—Ä–µ–¥—ñ –∂”ô–Ω–µ “õ–∞–±—ã–ª–¥–∞–π –∞–ª–∞–¥—ã –Ω–µ–º–µ—Å–µ –∫–µ–ª—ñ—Å–ø–µ—É—ñ –º“Ø–º–∫—ñ–Ω.",
        reply_markup=cancel_kb()
    )

@dp.message_handler(state=OrderStates.waiting_price)
async def get_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text.strip())
        if price < 100:
            await message.answer(
                "‚ùå –ë–∞“ì–∞ —Ç—ã–º –∞–∑! –ö–µ–º—ñ–Ω–¥–µ 100 —Ç–µ“£–≥–µ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.",
                reply_markup=cancel_kb()
            )
            return
        if price > 100000:
            await message.answer(
                "‚ùå –ë–∞“ì–∞ —Ç—ã–º –∂–æ“ì–∞—Ä—ã! 100,000 —Ç–µ“£–≥–µ–¥–µ–Ω –∞—Å–ø–∞—É—ã –∫–µ—Ä–µ–∫.",
                reply_markup=cancel_kb()
            )
            return
    except ValueError:
        await message.answer(
            "‚ùå “ö–∞—Ç–µ —Ñ–æ—Ä–º–∞—Ç! –¢–µ–∫ —Å–∞–Ω–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.\n–ú—ã—Å–∞–ª: 500",
            reply_markup=cancel_kb()
        )
        return
    
    await state.update_data(price=price)
    await OrderStates.waiting_phone.set()
    await message.answer(
        "–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:\n\n"
        "üì± “ö–∞–∑–∞“õ—Å—Ç–∞–Ω–¥—ã“õ –Ω”©–º—ñ—Ä: +7 707/775/701/702/747/705/708/700/776/771/778/706/777\n"
        "–ú—ã—Å–∞–ª: +7 701 123 45 67 –Ω–µ–º–µ—Å–µ 8 701 123 45 67",
        reply_markup=phone_kb()
    )

@dp.message_handler(content_types=types.ContentType.CONTACT, state=OrderStates.waiting_phone)
async def get_phone_contact(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number
    is_valid, cleaned_phone = validate_kz_phone(phone)
    
    if not is_valid:
        await message.answer(
            "‚ùå “ö–∞—Ç–µ –Ω”©–º—ñ—Ä!\n\n"
            "“ö–∞–∑–∞“õ—Å—Ç–∞–Ω–¥—ã“õ –Ω”©–º—ñ—Ä –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:\n"
            "+7 707/775/701/702/747/705/708/700/776/771/778/706/777\n\n"
            "–ú—ã—Å–∞–ª: +7 701 123 45 67",
            reply_markup=phone_kb()
        )
        return
    
    await process_phone(message, state, cleaned_phone)

@dp.message_handler(state=OrderStates.waiting_phone)
async def get_phone_text(message: types.Message, state: FSMContext):
    phone = message.text
    is_valid, cleaned_phone = validate_kz_phone(phone)
    
    if not is_valid:
        await message.answer(
            "‚ùå “ö–∞—Ç–µ –Ω”©–º—ñ—Ä!\n\n"
            "“ö–∞–∑–∞“õ—Å—Ç–∞–Ω–¥—ã“õ –Ω”©–º—ñ—Ä –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:\n"
            "+7 707/775/701/702/747/705/708/700/776/771/778/706/777\n\n"
            "–ú—ã—Å–∞–ª: +7 701 123 45 67 –Ω–µ–º–µ—Å–µ 8 701 123 45 67",
            reply_markup=phone_kb()
        )
        return
    
    await process_phone(message, state, cleaned_phone)

async def process_phone(message: types.Message, state: FSMContext, phone: str):
    data = await state.get_data()
    from_addr = data['from_addr']
    to_addr = data['to_addr']
    price = data['price']
    trip_type = data.get('trip_type', 'city')
    trip_type_text = data.get('trip_type_text', 'üèô “ö–∞–ª–∞ —ñ—à—ñ–Ω–¥–µ')
    
    order_id = await db.insert_order(
        from_addr, to_addr, price, phone, message.from_user.id, trip_type
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –≤–æ–¥–∏—Ç–µ–ª–µ–π
    msg = await bot.send_message(
        GROUP_ID,
        f"üöï –ñ–∞“£–∞ —Ç–∞–ø—Å—ã—Ä—ã—Å #{order_id}\n"
        f"üìå –¢“Ø—Ä—ñ: {trip_type_text}\n\n"
        f"üìç “ö–∞–π–¥–∞–Ω: {from_addr}\n"
        f"üìç “ö–∞–π–¥–∞: {to_addr}\n"
        f"üí∞ –ö–ª–∏–µ–Ω—Ç “±—Å—ã–Ω—ã—Å—ã: {price} ‚Ç∏\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç ”©–∑ –±–∞“ì–∞—Å—ã–Ω “±—Å—ã–Ω–¥—ã. –ö–µ–ª—ñ—Å—Å–µ“£—ñ–∑ - “õ–∞–±—ã–ª–¥–∞“£—ã–∑!",
        reply_markup=accept_keyboard(order_id)
    )

    await db.update_group_message_id(order_id, msg.message_id)
    await state.finish()
    await message.answer(
        f"‚úÖ –¢–∞–ø—Å—ã—Ä—ã—Å #{order_id} –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ!\n\n"
        f"üìå –°–∞–ø–∞—Ä —Ç“Ø—Ä—ñ: {trip_type_text}\n"
        f"üí∞ –°—ñ–∑–¥—ñ“£ –±–∞“ì–∞ “±—Å—ã–Ω—ã—Å—ã“£—ã–∑: {price} ‚Ç∏\n\n"
        f"üöï –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ –∂“Ø—Ä–≥—ñ–∑—É—à—ñ–ª–µ—Ä–≥–µ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.\n"
        f"–ö“Ø—Ç—ñ“£—ñ–∑...",
        reply_markup=main_menu_kb()
    )

# ---------------------
# –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞
# ---------------------
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("accept_"))
async def callback_accept(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    driver_id = callback.from_user.id
    driver_name = callback.from_user.full_name or callback.from_user.username or "–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ"

    ok = await db.try_accept_order(order_id, driver_id)
    order = await db.get_order(order_id)
    
    if not order:
        await callback.answer("–¢–∞–ø—Å—ã—Ä—ã—Å —Ç–∞–±—ã–ª–º–∞–¥—ã", show_alert=True)
        return
    
    if not ok:
        await callback.answer("–ë“±–ª —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç—ã –±–∞—Å“õ–∞ –∂“Ø—Ä–≥—ñ–∑—É—à—ñ “õ–∞–±—ã–ª–¥–∞–ø “õ–æ–π–¥—ã.", show_alert=True)
        return

    await db.register_driver(driver_id, driver_name)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç–∏–ø–∞ –ø–æ–µ–∑–¥–∫–∏
    trip_type_icon = "üèô" if order[9] == "city" else "üåÑ"
    trip_type_text = "“ö–∞–ª–∞ —ñ—à—ñ–Ω–¥–µ" if order[9] == "city" else "“ö–∞–ª–∞–¥–∞–Ω —Ç—ã—Å"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    try:
        await bot.edit_message_text(
            chat_id=GROUP_ID,
            message_id=order[8],
            text=f"‚úÖ –¢–∞–ø—Å—ã—Ä—ã—Å #{order_id} “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã\n"
                 f"üöó –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ: {driver_name}\n"
                 f"üìå –¢“Ø—Ä—ñ: {trip_type_icon} {trip_type_text}\n\n"
                 f"üìç “ö–∞–π–¥–∞–Ω: {order[1]}\n"
                 f"üìç “ö–∞–π–¥–∞: {order[2]}\n"
                 f"üí∞ –ë–∞“ì–∞—Å—ã: {order[3]} ‚Ç∏"
        )
    except Exception as e:
        print("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å:", e)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    await bot.send_message(
        driver_id,
        f"‚úÖ –°—ñ–∑ —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç—ã “õ–∞–±—ã–ª–¥–∞–¥—ã“£—ã–∑ #{order_id}\n"
        f"üìå –¢“Ø—Ä—ñ: {trip_type_icon} {trip_type_text}\n\n"
        f"üìç “ö–∞–π–¥–∞–Ω: {order[1]}\n"
        f"üìç “ö–∞–π–¥–∞: {order[2]}\n"
        f"üí∞ –ë–∞“ì–∞—Å—ã: {order[3]} ‚Ç∏\n"
        f"üì± –ö–ª–∏–µ–Ω—Ç—Ç—ñ“£ —Ç–µ–ª–µ—Ñ–æ–Ω—ã: {order[4]}",
        reply_markup=complete_trip_keyboard(order_id)
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞
    passenger_id = order[5]
    await bot.send_message(
        passenger_id,
        f"‚úÖ –ñ“Ø—Ä–≥—ñ–∑—É—à—ñ —Ç–∞–±—ã–ª–¥—ã!\n"
        f"üöó {driver_name}\n"
        f"üí∞ –ë–∞“ì–∞: {order[3]} ‚Ç∏\n\n"
        f"–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ –∂–æ–ª–¥–∞..."
    )

    await callback.answer("–¢–∞–ø—Å—ã—Ä—ã—Å “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã!")

# ---------------------
# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
# ---------------------
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("complete_"))
async def callback_complete(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    order = await db.get_order(order_id)
    
    if not order:
        await callback.answer("–¢–∞–ø—Å—ã—Ä—ã—Å —Ç–∞–±—ã–ª–º–∞–¥—ã", show_alert=True)
        return

    passenger_id = order[5]
    await db.complete_order(order_id)

    await callback.message.answer("‚úÖ –°–∞–ø–∞—Ä –∞—è“õ—Ç–∞–ª–¥—ã! –†–∞—Ö–º–µ—Ç!")
    await callback.answer("–°–∞–ø–∞—Ä –∞—è“õ—Ç–∞–ª–¥—ã!")

    # –ü—Ä–æ—Å–∏–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É
    await bot.send_message(
        passenger_id,
        f"‚úÖ –°—ñ–∑–¥—ñ“£ —Å–∞–ø–∞—Ä—ã“£—ã–∑ –∞—è“õ—Ç–∞–ª–¥—ã!\n"
        "–ñ“Ø—Ä–≥—ñ–∑—É—à—ñ–Ω—ñ –±–∞“ì–∞–ª–∞“£—ã–∑:",
        reply_markup=rating_keyboard(order_id)
    )

# ---------------------
# –û—Ü–µ–Ω–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è
# ---------------------
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("rate_"))
async def callback_rate(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    order_id = int(parts[1])
    rating = int(parts[2])

    await db.set_rating(order_id, rating)
    
    try:
        await callback.message.edit_text(
            f"‚≠ê –†–∞—Ö–º–µ—Ç! –°—ñ–∑ –∂“Ø—Ä–≥—ñ–∑—É—à—ñ–Ω—ñ {rating} ‚≠ê –¥–µ–ø –±–∞“ì–∞–ª–∞–¥—ã“£—ã–∑."
        )
    except:
        await callback.message.answer(
            f"‚≠ê –†–∞—Ö–º–µ—Ç! –°—ñ–∑ –∂“Ø—Ä–≥—ñ–∑—É—à—ñ–Ω—ñ {rating} ‚≠ê –¥–µ–ø –±–∞“ì–∞–ª–∞–¥—ã“£—ã–∑."
        )
    
    await callback.answer("–†–∞—Ö–º–µ—Ç –∑–∞ –±–∞“ì–∞–ª–∞—É–¥—ã!")

# ---------------------
# –ú–æ–∏ –∑–∞–∫–∞–∑—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# ---------------------
@dp.message_handler(lambda m: m.text == "üìä –ú–µ–Ω—ñ“£ —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞—Ä—ã–º")
async def my_orders(message: types.Message):
    await message.answer("–ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è ”ô–∑—ñ—Ä—à–µ –∂–∞—Å–∞–ª—É–¥–∞...")

# ---------------------
# –ó–∞–ø—É—Å–∫
# ---------------------
# ---------------------
# –ó–∞–ø—É—Å–∫
# ---------------------
if __name__ == '__main__':
    import os
    from aiohttp import web
    
    # –ü–æ–ª—É—á–∞–µ–º URL –≤–µ–±—Ö—É–∫–∞ –∏–∑ Render
    WEBHOOK_HOST = os.getenv('RENDER_EXTERNAL_URL', 'https://lenger-taxi24-bot.onrender.com')
    WEBHOOK_PATH = f'/webhook/{os.getenv("BOT_TOKEN").split(":")[1]}'
    WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
    
    # –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    WEBAPP_HOST = '0.0.0.0'
    WEBAPP_PORT = int(os.getenv('PORT', 10000))
    
    async def on_startup(app):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.init_db()
        
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        print(f'Webhook set to {WEBHOOK_URL}')
    
    async def on_startup(app):
        await bot.delete_webhook()
    
    async def webhook_handle(request):
        update = await request.json()
        telegram_update = types.Update(**update)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        Dispatcher.set_current(dp)
        Bot.set_current(bot)
        
        await dp.process_update(telegram_update)
        return web.Response()
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook_handle)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)